name: Continuous Integration

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - 'LICENSE'
  pull_request:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - 'LICENSE'
    types:
      - opened
      - reopened
      - synchronize
  create:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

env:
  DOCKER_BUILDKIT: 1
  GOLANG_VERSION: 1.16

jobs:

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Golang Environment
        uses: actions/setup-go@v2
        with:
          go-version: '${{ env.GOLANG_VERSION }}'
      - name: Run Tests
        run: make test

  build:
    name: Build Image
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      - name: Cache Docker layers
        uses: actions/cache@v2.1.4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: --rm-dist --debug --skip-publish --snapshot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Image
        uses: docker/build-push-action@v2
        with:
          file: build/Dockerfile
          context: '.'
          target: local
          platforms: linux/arm,linux/arm64,linux/amd64,linux/ppc64le,linux/s390x,linux/mips64le,linux/386
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: nginx/nginx-prometheus-exporter:${{ github.sha }}
          push: false

  release-docker:
    name: Release Image
    runs-on: ubuntu-20.04
    needs: [build, unit-tests]
    if:
      github.repository == 'nginxinc/nginx-prometheus-exporter' &&
      github.event_name == 'create' &&
      contains(github.ref, 'refs/tags/')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Retrieve Tag
        id: get_version
        run: echo ::set-output name=GIT_TAG::$(echo ${GITHUB_REF/refs\/tags\//} | tr -d v)
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      - name: Cache Docker layers
        uses: actions/cache@v2.1.4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: DockerHub Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Publish Release Notes
        uses: release-drafter/release-drafter@v5
        with:
            publish: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Push to Dockerhub
        uses: docker/build-push-action@v2
        with:
          file: build/Dockerfile
          context: '.'
          target: local
          platforms: linux/arm,linux/arm64,linux/amd64,linux/ppc64le,linux/s390x,linux/mips64le,linux/386
          tags: |
            nginx/nginx-prometheus-exporter:latest
            nginx/nginx-prometheus-exporter:${{ steps.get_version.outputs.GIT_TAG }}
          push: true
          build-args: |
            VERSION=${{ steps.get_version.outputs.GIT_TAG }}
            GIT_COMMIT=${{ github.sha }}

  notify:
    name: Notify
    runs-on: ubuntu-20.04
    needs: release-docker
    if: always() && github.ref == 'refs/heads/master'
    steps:
      - name: Workflow Status
        id: check
        uses: martialonline/workflow-status@v2
      - name: Output Variables
        id: commit
        run: |
          echo "::set-output name=sha::$(echo ${GITHUB_SHA} | cut -c1-7)"
          echo "::set-output name=repo::$(echo ${GITHUB_REPOSITORY} | cut -d '/' -f 2)"
      - name: Send Notification
        uses: 8398a7/action-slack@v3
        if:
          steps.check.outputs.status == 'failure' ||
          steps.check.outputs.status == 'cancelled'
        with:
          status: custom
          custom_payload: |
            {
              username: 'Github',
              icon_emoji: ':octocat:',
              mention: 'channel',
              attachments: [{
                title: '[${{ steps.commit.outputs.repo }}] ${{ github.workflow }} pipeline has failed',
                color: '${{ steps.check.outputs.status }}' == 'failure' ? 'danger' : 'warning',
                fields: [{
                  title: 'Commit Hash',
                  value: '${{ steps.commit.outputs.sha }}',
                  short: true
                },
                {
                  title: 'Author',
                  value: '${{ github.actor }}',
                  short: true
                },
                {
                  title: 'Commit Message',
                  value: `${{ github.event.head_commit.message }}`,
                  short: false
                },
                {
                  title: 'Pipeline URL',
                  value: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
                  short: false
                }]
              }]
            }
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
